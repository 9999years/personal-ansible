---
- name: Log apt packages to be installed
  debug:
    var: apt_packages_essential|reject('in', apt_packages_skip)|list

- name: Install apt packages (essential)
  become: true
  tags:
    - apt
  apt:
      name: "{{ apt_packages_essential|reject('in', apt_packages_skip)|list }}"

- name: Install apt packages
  become: true
  tags:
    - apt
  apt:
      name: "{{ (apt_packages + apt_packages_extra)|reject('in', apt_packages_skip)|list }}"

- name: Calculate Linuxbrew packages to be installed
  set_fact:
    homebrew_install: >-
      {{ (homebrew_packages + homebrew_packages_extra)
      |reject('in', homebrew_packages_skip)|list }}

- name: Log Linuxbrew packages to be installed
  debug:
    var: homebrew_install

- name: Install/upgrade Linuxbrew packages
  tags:
      - brew
      - homebrew
      - linuxbrew
  when: install_homebrew|bool
  become: true
  become_user: '{{ user }}'
  homebrew:
      state: latest
      package: "{{ homebrew_install }}"
      path: '{{ homebrew_bin_dir }}'
      update_homebrew: true
      upgrade_all: true

- name: Link Linuxbrew binaries to /usr/local/bin
  tags:
      - packages
      - brew
      - homebrew
      - linuxbrew
  when: install_homebrew|bool
  loop: '{{ homebrew_links }}'
  become: true
  failed_when: false
  file:
      state: link
      src: '{{ homebrew_bin_dir }}/{{ item }}'
      path: '/usr/local/bin/{{ item }}'
      mode: 0755

- name: Log Pip packages to be installed
  tags:
      - python
      - pip
  debug:
    var: pip_packages

- name: Install pip packages
  become: true
  tags:
      - python
      - pip
  environment:
      PATH: '{{ nix_bins }}:{{ ansible_env.PATH }}'

      NIX_PATH: '{{ ansible_user_dir }}/.nix-defexpr/channels:{{ ansible_user_dir }}/.nix-defexpr/channels:{{ ansible_user_dir }}/.nix-defexpr/channels'
      NIX_SSL_CERT_FILE: /etc/ssl/certs/ca-certificates.crt
      NIX_PROFILES: /nix/var/nix/profiles/default {{ nix_profile }}

      CFLAGS: -I{{ ansible_user_dir }}/.local/include -I/usr/local/include
      CPPFLAGS: -I{{ ansible_user_dir }}/.local/include -I/usr/local/include
      C_INCLUDE_PATH: '{{ ansible_user_dir }}/.local/include:/usr/local/include'
      LDFLAGS: -L{{ ansible_user_dir }}/.local/lib64 -L/usr/local/lib64 -L/lib64 -L/usr/lib64 -L{{ ansible_user_dir }}/.local/lib -L/usr/local/lib
      LD_LIBRARY_PATH: '{{ ansible_user_dir }}/.local/lib64:/usr/local/lib64:/lib64:/usr/lib64:{{ ansible_user_dir }}/.local/lib:/usr/local/lib'
      LD_RUN_PATH: '{{ ansible_user_dir }}/.local/lib64:/usr/local/lib64:/lib64:/usr/lib64'
      LIBRARY_PATH: '{{ ansible_user_dir }}/.local/lib64:/usr/local/lib64:/lib64:/usr/lib64:{{ ansible_user_dir }}/.local/lib:/usr/local/lib'

  pip:
      executable: '{{ pip_bin }}'
      name: '{{ pip_packages }}'
      state: latest

- name: Log Ruby gems to be installed
  debug:
    var: ruby_gems

- name: Install Ruby Gems
  become: true
  loop: '{{ ruby_gems }}'
  gem:
      executable: '{{ nix_bins }}/gem'
      name: '{{ item }}'
      state: latest
      user_install: false

- name: Calculate npm packages to be installed
  set_fact:
    npm_install: >-
      {{ (npm_packages + npm_packages_extra)
      |reject('in', npm_packages_skip)|list }}

- name: Log npm packages to be installed
  debug:
    var: npm_install

- name: Install Node (npm) packages
  become: '{{ npm_install_become|bool }}'
  tags:
      - node
      - npm
  loop: "{{ npm_install }}"
  when: item not in npm_packages_skip
  npm:
      executable: '{{ npm_bin }}'
      global: true
      name: '{{ item }}'
      state: latest

- name: Install Vim plugins
  become: true
  become_user: '{{ user }}'
  shell: "yes '\n' | vim +PlugInstall +qall!"
